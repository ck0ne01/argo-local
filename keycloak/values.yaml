keycloak:
  ## @section Keycloak parameters

  ## Bitnami Keycloak image version
  ## ref: https://hub.docker.com/r/bitnami/keycloak/tags/
  ## @param image.registry [default: REGISTRY_NAME] Keycloak image registry
  ## @param image.repository [default: REPOSITORY_NAME/keycloak] Keycloak image repository
  ## @skip image.tag Keycloak image tag (immutable tags are recommended)
  ## @param image.digest Keycloak image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
  ## @param image.pullPolicy Keycloak image pull policy
  ## @param image.pullSecrets Specify docker-registry secret names as an array
  ## @param image.debug Specify if debug logs should be enabled
  ##
  ## Keycloak authentication parameters
  ## ref: https://github.com/bitnami/containers/tree/main/bitnami/keycloak#admin-credentials
  ##
  auth:
    ## @param auth.adminUser Keycloak administrator user
    ##
    adminUser: admin
    ## @param auth.adminPassword Keycloak administrator password for the new user
    ##
    adminPassword: "admin"

  ## HTTPS settings
  ## ref: https://github.com/bitnami/containers/tree/main/bitnami/keycloak#tls-encryption
  ##
  tls:
    ## @param tls.enabled Enable TLS encryption. Required for HTTPs traffic.
    ##
    enabled: false
    ## @param tls.existingSecret Existing secret containing the TLS certificates per Keycloak replica
    ## Create this secret following the steps below:
    ## 1) Generate your truststore and keystore files (more info at https://www.keycloak.org/docs/latest/server_installation/#_setting_up_ssl)
    ## 2) Rename your truststore to `keycloak.truststore.jks` or use a different name overwriting the value 'tls.truststoreFilename'.
    ## 3) Rename your keystores to `keycloak.keystore.jks` or use a different name overwriting the value 'tls.keystoreFilename'.
    ## 4) Run the command below where SECRET_NAME is the name of the secret you want to create:
    ##       kubectl create secret generic SECRET_NAME --from-file=./keycloak.truststore.jks --from-file=./keycloak.keystore.jks
    ## NOTE: If usePem enabled, make sure the PEM key and cert are named 'tls.key' and 'tls.crt' respectively.
    ##
    ## @param tls.usePem Use PEM certificates as input instead of PKS12/JKS stores
    ## If "true", the Keycloak chart will look for the files keycloak.key and keycloak.crt inside the secret provided with 'existingSecret'.
    ##
    usePem: false
  ## @param production Run Keycloak in production mode. TLS configuration is required except when using proxy=edge.
  ##
  production: false
  ## @param proxy reverse Proxy mode edge, reencrypt, passthrough or none
  ## ref: https://www.keycloak.org/server/reverseproxy
  ##
  proxy: passthrough

  extraEnvVars:
    - name: KC_HEALTH_ENABLED
      value: "true"
      #- name: KC_VAULT
      #  value: "file"
      #- name: KC_VAULT_DIR
      #  value: "/etc/gke-secrets"
    - name: KC_LOG_LEVEL
      value: INFO,org.keycloak.events:DEBUG
    - name: QUARKUS_HTTP_LIMITS_MAX_HEADER_LIST_SIZE
      value: "20480"

  ## @param extraEnvVarsCM Name of existing ConfigMap containing extra env vars
  ##
  extraEnvVarsCM: ""
  ## @param extraEnvVarsSecret Name of existing Secret containing extra env vars
  ##
  extraEnvVarsSecret: ""

  ## @section Keycloak statefulset parameters

  ## @param replicaCount Number of Keycloak replicas to deploy
  ##
  replicaCount: 1

  ## @param topologySpreadConstraints Topology Spread Constraints for pod assignment spread across your cluster among failure-domains. Evaluated as a template
  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/#spread-constraints-for-pods
  ##
  topologySpreadConstraints:
    - maxSkew: 1
      topologyKey: node
      whenUnsatisfiable: ScheduleAnyway #ScheduleAnyway | DoNotSchedule
  service:
    ## @param service.type Kubernetes service type
    ##
    type: ClusterIP
    ## @param service.http.enabled Enable http port on service
    ##
    http:
      enabled: true
    ## @param service.ports.http Keycloak service HTTP port
    ## @param service.ports.https Keycloak service HTTPS port
    ##
    ports:
      http: 80
      https: 443

  serviceAccount:
    ## @param serviceAccount.automountServiceAccountToken Auto-mount the service account token in the pod
    ##
    automountServiceAccountToken: true

  ## Keycloak Pod Disruption Budget configuration
  ## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
  ##
  pdb:
    ## @param pdb.create Enable/disable a Pod Disruption Budget creation
    ##
    create: false
    ## @param pdb.minAvailable Minimum number/percentage of pods that should remain scheduled
    ##
    minAvailable: 1

  ## Metrics configuration
  ##
  metrics:
    ## Prometheus Operator ServiceMonitor configuration
    ##
    serviceMonitor:
      endpoints:
        - path: /metrics
        - path: /realms/master/metrics

  ## @section Database parameters

  ## PostgreSQL chart configuration
  ## ref: https://github.com/bitnami/charts/blob/main/bitnami/postgresql/values.yaml
  ## @param postgresql.enabled Switch to enable or disable the PostgreSQL helm chart
  ## @param postgresql.auth.postgresPassword Password for the "postgres" admin user. Ignored if `auth.existingSecret` with key `postgres-password` is provided
  ## @param postgresql.auth.username Name for a custom user to create
  ## @param postgresql.auth.password Password for the custom user to create
  ## @param postgresql.auth.database Name for a custom database to create
  ## @param postgresql.auth.existingSecret Name of existing secret to use for PostgreSQL credentials
  ## @param postgresql.auth.secretKeys.userPasswordKey Name of key in existing secret to use for PostgreSQL credentials. Only used when `auth.existingSecret` is set.
  ## @param postgresql.architecture PostgreSQL architecture (`standalone` or `replication`)
  ##
  postgresql:
    enabled: true
    auth:
      postgresPassword: "password"
      username: bn_keycloak
      password: "password"
      database: bitnami_keycloak
    architecture: standalone
